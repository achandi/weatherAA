{"version":3,"sources":["components/UI/Panel/Panel.less","components/UI/Card/Card.less","components/UI/Panel/Panel.js","components/UI/Card/Card.js","components/Day/Day.js","utilities/constants.js","utilities/helperFunctions.js","utilities/weatherFunctions.js","components/weatherPanel/weatherPanel.js","components/SearchPanel/SearchPanel.js","App.js","serviceWorker.js","index.js","App.less","components/SearchPanel/SearchPanel.less"],"names":["module","exports","Panel","props","className","styles","panel","children","Card","card","Day","day","weather","forecastFrom","src","icon","displayWeather","highTemp","lowTemp","totalRain","rainStart","totalSnow","snowStart","avgWind","avgCloudiness","suggestedCities","breakDownPre","time","rain","snow","wind","clouds","temp","description","unitsOfMeasurment","metric","imperial","kelvin","sum","arr","reduce","x","y","avg","length","rawDataReduce","tzOffset","count","acc","hourSet","dateTime","dateTzAdjustment","Date","toLocaleTimeString","timeZone","hour12","hour","minute","toLocaleDateString","weekday","convertToLocalTimeAndDay","dt","accDay","Object","entries","reqData","main","speed","all","acc2","key","val","hoursToDayReduce","getDayValues","measurement","modeFound","sort","filter","pop","findIndex","modeAtIndex","mostFrequent","freqIndex","Math","round","replace","toUpperCase","max","min","ciyWeather","data","map","index","dayValues","city","SearchPanel","useState","searchQuery","setSearchQuery","searchPanel","searchTitle","searchInput","id","selectedCity","value","onChange","event","setUnits","target","units","keys","autoComplete","list","onClick","setCity","toLowerCase","initialState","loading","error","loadedCity","weatherReducer","state","action","type","err","timezone","name","weatherHandler","cityData","App","useReducer","weatherData","dispatchWeatherData","useEffect","a","axios","get","process","response","message","app","parm","cities","mapCity","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.16e20d2f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"panel\":\"panel_eWt3A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"card_IJcez\"};","import React from \"react\";\nimport styles from \"./Panel.less\";\n\nconst Panel = (props) => {\n  return <div className={styles.panel}>{props.children}</div>;\n};\n\nexport default Panel;\n","import React from \"react\";\nimport styles from \"./Card.less\";\n\nconst Card = (props) => {\n  return <div className={styles.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"../UI/Card/Card\";\nconst Day = (props) => {\n  return (\n    <Card>\n      <div>\n        <h1>\n          {props.day}\n          {props.weather.forecastFrom && \"*\"}\n        </h1>\n        <img src={props.weather.icon} />\n        <h3>{props.weather.displayWeather}</h3>\n        <h3>\n          High {props.weather.highTemp} Low {props.weather.lowTemp}\n        </h3>\n        <div className=\"percipitation\">\n          {\" \"}\n          {props.weather.totalRain &&\n            `Rain: ${props.weather.totalRain} begins ${props.weather.rainStart}`}\n          {props.weather.totalSnow &&\n            `Snow: ${props.weather.totalSnow}  begins  ${props.weather.snowStart}`}\n        </div>\n        <div className=\"averages\">\n          <li>Average wind: {props.weather.avgWind} </li>\n          <li>Average cloudiness: {props.weather.avgCloudiness}</li>\n        </div>\n        <p>\n          {props.weather.forecastFrom &&\n            \"*Forecast from \" + props.weather.forecastFrom}\n        </p>\n      </div>\n    </Card>\n  );\n};\n\nexport default Day;\n","//i want to make these cities suggested, but give the user the option to search any city (as more potential uses)\nexport const suggestedCities = [\"Toronto\", \"Vancouver\", \"Montreal\"];\n\nexport const baseWeatherUrl =\n  \"https://api.openweathermap.org/data/2.5/forecast\";\n\n//came up with data that might be usefeul by looking at api docs [data.city, data.list]\n//https://openweathermap.org/forecast5\n//city.name   city.timezone (shift in seconds from UTC)\n//below are list.\nexport const breakDownPre = {\n  time: [], //list.dt (in unix, UTC, need to convert to show city local time)\n  rain: [], //list.rain.3h\n  snow: [], //list.snow.3h\n  wind: [], //list.wind.speed\n  clouds: [], // list.clouds.all\n  temp: [], //list.main.temp\n  description: [], //list.weather.description\n  icon: [], //list.weather.icon\n};\n\n// came up with final break down logic next, could use this to get the value with object methods, but just copying for now (time save)\n// export const breakDown = {\n//   time: [], //can be used for a: tell the user when day 1 forecast starts if it's cutoff, and b) when rain/snow will start\n//   day: \"\", //IF i do 5 day as array of values vs doing this as key/value with day as key (still might be good for ease of refrence)\n//   displayWeather: [], // push all 3 hour weather descriptions, then show the most frequent as a string\n//   icon: [], //push all icons, then show the icon that mathces the display weather found above at corresponding index\n//   high: [], //push all temperatures, find Math.max (round) show high for the day\n//   low: [], //push all temperatures, find Math.min (round)  show low for the day\n//   wind: [], //push all wind speeds, find the average (round)\n//   clouds: [], // push all cloudiness %, find the average (thinking that combined with rain totals, can make a custom metric to tell if the day will be dreary)\n//   totalRain: 0, // sum all 3 hour rain amounts in a day\n//   totalSnow: 0, //sum all 3 hour snow amounts\n//   rainStart: [], //push all 3 hour rain amounts, cross refrerence with time array\n//   snowStart: [], //push all 3 hour snow amounts, cross refrerence with time array\n// };\n\n//manually typed out symbols for Celsius, meter/sec, etc after looking at docs\nexport const unitsOfMeasurment = {\n  metric: { temp: \"°C\", wind: \"m/sec\" }, //manually mapped temp degree symbol\n  imperial: { temp: \"°F\", wind: \"mph\" },\n  kelvin: { temp: \"K\", wind: \"m/sec\" },\n};\n","export const modeAtIndex = (arr) => {\n  const modeFound = [...arr]\n    .sort(\n      (x, y) =>\n        arr.filter((val) => val === x).length -\n        arr.filter((val) => val === y).length\n    )\n    .pop();\n  return [modeFound, arr.findIndex((x) => x === modeFound)];\n};\n\nexport const sum = (arr) => arr.reduce((x, y) => x + y, 0);\nexport const avg = (arr) => sum(arr) / arr.length;\n\nexport const convertToLocalTimeAndDay = (dateTime, tzOffset) => {\n  const dateTzAdjustment = new Date((dateTime + tzOffset) * 1000);\n  const time = dateTzAdjustment.toLocaleTimeString(\n    {},\n    { timeZone: \"UTC\", hour12: true, hour: \"numeric\", minute: \"numeric\" }\n  );\n  const day = dateTzAdjustment.toLocaleDateString(\n    {},\n    { timeZone: \"UTC\", weekday: \"long\" }\n  );\n\n  return [time, day];\n};\n","// note: added more comments than usual\nimport { breakDownPre } from \"./constants\";\nimport {\n  convertToLocalTimeAndDay,\n  modeAtIndex,\n  sum,\n  avg,\n} from \"./helperFunctions\";\n//see breakDown constant for breakdown of final dataect goal envisioned first\n\n//Note: keep my reduce calls clean lately by referecing a named function i.e. .reduce(callback, {})\n//With partial application, I can pass additional params for these reduce callbacks\n//i.e. line 43 pass time, hourSet (3 hour) in first call (), reduce callback is second call ()\nconst hoursToDayReduce = (time, hourSet) => {\n  //to do: (time permit) refactor reqData code so it's immutable obj\n  const reqData = { time };\n  //Note: advanced destructuring below with default case, for readability don't usually do this (will adapt to AgencyAnalytics policy :) )\n  ({\n    main: { temp: reqData.temp },\n    weather: [{ description: reqData.description, icon: reqData.icon }],\n    rain: { \"3h\": reqData.rain } = { \"3h\": 0 },\n    snow: { \"3h\": reqData.snow } = { \"3h\": 0 },\n    wind: { speed: reqData.wind } = { speed: 0 },\n    clouds: { all: reqData.clouds } = { all: 0 },\n  } = hourSet);\n  //reduce callback below, passing in new values to day\n  return (acc2, [key, val]) => ({ ...acc2, [key]: [...val, reqData[key]] });\n};\n\n//Why count? api's 5 day forecast has data in 3 hour intervals from now...\n//Usually Day 1 has a past cutoff, but past hours !== forecast, unlike day 6 with it's future cutoff. so dont include day 6\n//note: for immutability, usually call .filter((x, i) => i < 5) after reduce instead of count +=1 during (may refactor later)\nconst rawDataReduce = (tzOffset) => {\n  let count = 0;\n  // each hourset below = 3 hours of data\n  return (acc, hourSet) => {\n    ///Setting the date below to the timezone of the city, and getting day and time\n    const [time, day] = convertToLocalTimeAndDay(hourSet.dt, tzOffset);\n    //if day doesnt exist in object\n    if (!acc[day]) count += 1;\n    if (count > 5) {\n      return acc;\n    }\n    const accDay = acc[day] || breakDownPre; //constant set up for init\n    return {\n      ...acc,\n      [day]: Object.entries(accDay).reduce(hoursToDayReduce(time, hourSet), {}),\n    };\n  };\n};\n\nexport const weatherHandler = (data) => {\n  const tzOffset = data.city.timezone;\n  const cityName = data.city.name;\n  return [\n    cityName.toLowerCase(),\n    data.list.reduce(rawDataReduce(tzOffset), {}), //partial apply tzOffset\n  ]; //lately ive been prefering writing my reduce functions like this and using partial application, fine with any company policy :)\n};\n\n//based on breakdown constant that's commented out (minor changes)\nexport const getDayValues = (day, measurement) => {\n  const [mostFrequent, freqIndex] = modeAtIndex(day.description);\n  const totalRain = Math.round(sum(day.rain));\n  const totalSnow = Math.round(sum(day.snow));\n  const rainStart =\n    totalRain > 0 ? day.time[day.rain.findIndex((val) => val > 0)] : false;\n  const snowStart =\n    totalSnow > 0 ? day.time[day.snow.findIndex((val) => val > 0)] : false;\n  const icon = `http://openweathermap.org/img/wn/${day.icon[freqIndex].replace(\n    \"n\",\n    \"d\"\n  )}@2x.png`;\n  return {\n    forecastFrom:\n      day.time[0] === \"2:00 am\" || day.time[0] === \"2:00 AM\"\n        ? false\n        : day.time[0],\n    displayWeather: mostFrequent.toUpperCase(),\n    highTemp: Math.round(Math.max(...day.temp)) + measurement.temp,\n    lowTemp: Math.round(Math.min(...day.temp)) + measurement.temp,\n    avgWind: Math.round(avg(day.wind)) + measurement.wind,\n    avgCloudiness: `${Math.round(avg(day.clouds))} %`,\n    icon: icon,\n    totalRain: totalRain ? totalRain + \" mm\" : false,\n    totalSnow: totalSnow ? totalSnow + \" mm\" : false,\n    rainStart,\n    snowStart,\n  };\n};\n","import React from \"react\";\nimport Panel from \"../UI/Panel/Panel\";\nimport Day from \"../Day/Day\";\nimport { getDayValues } from \"../../utilities/weatherFunctions\";\n\nconst ciyWeather = (props) => {\n  const renderDay = (data) => {\n    return Object.entries(data).map(([day, dayValues], index) => {\n      return (\n        <Day\n          key={props.city + day}\n          weather={getDayValues(dayValues, props.measurement)}\n          day={day}\n        />\n      );\n    });\n  };\n  return <Panel>{props.data ? renderDay(props.data) : null}</Panel>;\n};\n\nexport default ciyWeather;\n","import React, { useState } from \"react\";\nimport Panel from \"../UI/Panel/Panel\";\nimport { suggestedCities, unitsOfMeasurment } from \"../../utilities/constants\";\nimport styles from \"./SearchPanel.less\";\n\nconst SearchPanel = (props) => {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  return (\n    <div className={styles.searchPanel}>\n      <Panel>\n        <span className={styles.searchTitle}>\n          5 day Forecast - Search Cities\n        </span>\n        <div className={styles.searchInput}>\n          {props.children}\n          <datalist id=\"suggestions\">\n            {suggestedCities.map((selectedCity) => (\n              <option key={selectedCity} value={selectedCity}>\n                {selectedCity}\n              </option>\n            ))}\n          </datalist>\n          <select\n            onChange={(event) => props.setUnits(event.target.value)}\n            value={props.units}\n          >\n            {Object.keys(unitsOfMeasurment).map((key) => (\n              <option key={key}>{key}</option>\n            ))}\n          </select>\n          <input\n            onChange={(event) => setSearchQuery(event.target.value)}\n            autoComplete=\"on\"\n            list=\"suggestions\"\n            value={searchQuery}\n          />\n          <button onClick={() => props.setCity(searchQuery.toLowerCase())}>\n            Search\n          </button>\n        </div>\n      </Panel>\n    </div>\n  );\n};\n\nexport default SearchPanel;\n","import React, { useState, useEffect, useReducer } from \"react\";\nimport axios from \"axios\";\nimport styles from \"./App.less\";\nimport CityWeather from \"./components/weatherPanel/weatherPanel\";\nimport {\n  baseWeatherUrl,\n  suggestedCities,\n  unitsOfMeasurment,\n} from \"./utilities/constants\";\nimport { weatherHandler } from \"./utilities/weatherFunctions\";\nimport SearchPanel from \"./components/SearchPanel/SearchPanel\";\n\nconst initialState = {\n  loading: false,\n  error: \"\",\n  data: {},\n  loadedCity: \"\",\n};\n//with one reducer, feel it might not be as important to put in a seperate file (will easily adopt company policy :))\nconst weatherReducer = (state, action) => {\n  switch (action.type) {\n    case \"DATA_GET\":\n      return { ...state, loading: true, error: \"\" };\n    case \"DATA_FAIL\":\n      return { ...state, loading: false, error: action.err };\n    case \"DATA_SUCCESS\":\n      const [city, cityData] = weatherHandler(action.data);\n      return {\n        ...state,\n        loading: false,\n        data: { ...state.data, [city]: cityData },\n        loadedCity: city,\n      };\n    case \"CLEAR_DATA\":\n      return {\n        ...state,\n        loadedCity: \"\",\n        data: {},\n      };\n    case \"DISMISS_ERROR\":\n      return {\n        ...state,\n        error: \"\",\n      };\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const [city, setCity] = useState(suggestedCities[0]); //set default to first city in my list\n  const [units, setUnits] = useState(Object.keys(unitsOfMeasurment)[0]);\n  const [weatherData, dispatchWeatherData] = useReducer(\n    weatherReducer,\n    initialState\n  );\n\n  useEffect(() => {\n    setCity(suggestedCities[0]);\n    dispatchWeatherData({\n      type: \"CLEAR_DATA\",\n    });\n  }, [units]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        if (!weatherData.data || !weatherData.data[city]) {\n          dispatchWeatherData({\n            type: \"DATA_GET\",\n          });\n          const weatherData = await axios.get(\n            `${baseWeatherUrl}?units=${units}&q=${city}&appid=${process.env.REACT_APP_WEATHER_KEY}`\n          );\n          dispatchWeatherData({\n            type: \"DATA_SUCCESS\",\n            data: weatherData.data,\n            city,\n          });\n        }\n      } catch (err) {\n        if (err.response) {\n          dispatchWeatherData({\n            type: \"DATA_FAIL\",\n            err: `${err.name} ${err.response.data.message}`,\n          });\n          setCity(weatherData.loadedCity);\n        } else {\n          dispatchWeatherData({\n            type: \"DATA_FAIL\",\n            err: `${err.name} ${err.message}`,\n          });\n          setCity(weatherData.loadedCity);\n        }\n      }\n    })();\n  }, [city, units]);\n\n  const mapCity = (data) => {\n    if (data) {\n      return (\n        <CityWeather\n          measurement={unitsOfMeasurment[units]}\n          city={city}\n          data={data[city.toLowerCase()]}\n        ></CityWeather>\n      );\n    }\n  };\n  const mapLoadedCities = () => {\n    return Object.keys(weatherData.data).map((cities, index) => (\n      <option key={index} value={cities}>\n        {cities}\n      </option>\n    ));\n  };\n  return (\n    <div className={styles.app}>\n      <SearchPanel\n        setCity={(parm) => setCity(parm)}\n        units={units}\n        setUnits={(parm) => setUnits(parm)}\n      >\n        <span className={styles.loadedCity}>\n          City Loaded:\n          <select\n            onChange={(event) => setCity(event.target.value)}\n            value={city}\n          >\n            {weatherData.data && mapLoadedCities()}\n          </select>\n        </span>\n      </SearchPanel>\n      <br />\n      {/* normally would make both error/loading seperate component, time crunch */}\n      {weatherData.error && (\n        <div className={styles.error}>\n          {weatherData.error}\n          <button\n            onClick={() => dispatchWeatherData({ type: \"DISMISS_ERROR\" })}\n          >\n            X\n          </button>\n        </div>\n      )}\n      {weatherData.loading && <div className={styles.loading}>Loading...</div>}\n      <div>{mapCity(weatherData.data)}</div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"loading_3qya0\",\"error\":\"error_283--\",\"loadedCity\":\"loadedCity_2H-Hp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchPanel\":\"searchPanel_3Z6oI\",\"searchTitle\":\"searchTitle_3Z9pI\",\"searchInput\":\"searchInput_2EF7j\"};"],"sourceRoot":""}